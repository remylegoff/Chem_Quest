cid <- xpathSApply(x, "./x:CID", namespaces = "x",
xmlValue)
synonym <- xpathSApply(x, "./x:Synonym",
namespaces = "x", xmlValue)
df <- data.frame(Name = compound, CID = cid,
Synonym = synonym, stringsAsFactors = FALSE)
out <<- rbindlist(list(out, df))
})
}
else if (rootNode == "Fault") {
fault <- xpathApply(doc, "//x:Details", namespaces = "x",
xmlValue)
if (!quiet) {
print(paste(compound, fault[[1]], sep = ": "))
}
}
}, error = function(e) {
print(e)
}, finally = Sys.sleep(0.2))
}
rm(curlHandle)
gc()
return(out)
}
get_section = function(section){
sapply(section$Section, function(x){x$TOCHeading})
}
.section.by.heading = function (seclist, heading)
{
ret <- Filter(function(x) x$TOCHeading == heading, seclist)
if (length(ret) == 0)
return(NULL)
return(ret[[1]])
}
.section.handler = function (sec, keep = NULL, ignore = NULL)
{
n <- sec$TOCHeading
if (!is.null(ignore) && n %in% ignore)
return(NULL)
if (!is.null(keep) && !(n %in% keep))
return(NULL)
ret <- lapply(sec$Information, function(x) {
info = x
if ("Name" %in% names(info)) {
info.name <- info$Name
}else {info.name <- ""}
if (info.name == n){
info.name <- ""
}
val <- NA
info.val <- info$Value
if ("Number" %in% names(info.val)) {
val <- as.numeric(info.val$Number)
} else if ("StringWithMarkup" %in% names(info.val)) {
elems <- info.val$StringWithMarkup
val <- elems[[1]][["String"]]
} else if ("Binary" %in% names(info.val)) {
val <- info$Value$Binary
}else if ("DateValue" %in% names(info.val)) {
val <- info$DateValue
}else if ("Table" %in% names(info.val)) {
return(.handle.json.table(info.val$Table))
}
ret <- data.frame(val = val, stringsAsFactors = FALSE)
if (info.name != "" & info.name != "XLogP3-AA") {
names(ret) <- sprintf("%s.%s", n, info.name)
}else {
names(ret) <- n
}
return(ret)
})
return(ret)
}
get_record = function(cid) {
url <-
sprintf("https://pubchem.ncbi.nlm.nih.gov/rest/pug_view/data/compound/%s/JSON",
cid)
if (is.null(page)) {
warning(sprintf("No data found for %d", cid))
return(NULL)
}
h = basicTextGatherer()
status = curlPerform(url = url, writefunction = h$update)
val <- h$value()
record = RJSONIO::fromJSON(val)$Record
return(record)
}
get_identifier = function(record, list_identifiers) {
ret = data.frame(matrix(NA,nrow = 1,ncol = length(list_identifiers)))
colnames(ret) = list_identifiers
if (sum(grepl('Identifiers', get_section(record))) == 0) {
return(c())
} else{
ids  = .section.by.heading(record$Section,
get_section(record)[grepl('Identifiers', get_section(record))])
ids = .section.by.heading(ids$Section,'Other Identifiers')
ids_val <- lapply(list_identifiers, function(x){
sec <- .section.by.heading(ids$Section, x)
if(!is.null(sec)){
return(unlist(.section.handler(sec)))}
else{return(NA)}
})
ids_val = unlist(ids_val)
ids_val = ids_val[unique(names(ids_val))]
ids_val = na.omit(ids_val)
ret[names(ids_val)] = ids_val
return(ret)
}
}
get_synonyms = function(record){
if (sum(grepl('Identifiers', get_section(record))) == 0) {
return(c())
} else{
ids  = .section.by.heading(record$Section,
get_section(record)[grepl('Identifiers', get_section(record))])
ids = .section.by.heading(ids$Section,'Synonyms')
syn = sapply(ids$Section, .section.handler)
return(paste(unlist(syn),collapse = '\n'))
}
}
get_formula = function(record, list_formula) {
ret = data.frame(matrix(NA,nrow = 1,ncol = length(list_formula)))
colnames(ret) = list_formula
if (sum(grepl('Identifiers', get_section(record))) == 0) {
return(c())
} else{
ids  = .section.by.heading(record$Section,
get_section(record)[grepl('Identifiers', get_section(record))])
ids = .section.by.heading(ids$Section,'Computed Descriptors')
ids_val <- lapply(list_formula, function(x) {
sec <- .section.by.heading(ids$Section, x)
return(unlist(.section.handler(sec)))
})
ids_val = unlist(ids_val)
ids_val = ids_val[unique(names(ids_val))]
ret[names(ids_val)] = ids_val
return(ret)
}
}
get_comp_prop = function(record, list_comp_prop) {
ret = data.frame(matrix(NA,nrow = 1,ncol = length(list_comp_prop)))
colnames(ret) = list_comp_prop
if (sum(grepl('Properties', get_section(record))) == 0) {
return(c())
} else{
ids  = .section.by.heading(record$Section,
get_section(record)[grepl('Properties', get_section(record))])
ids = .section.by.heading(ids$Section,'Computed Properties')
ids_val <- lapply(list_comp_prop, function(x) {
sec <- .section.by.heading(ids$Section, x)
return(unlist(.section.handler(sec)))
})
ids_val = unlist(ids_val)
ids_val = ids_val[unique(names(ids_val))]
ret[names(ids_val)] = ids_val
return(ret)
}
}
get_exp_prop = function(record, list_exp_prop) {
ret = data.frame(matrix(NA,nrow = 1,ncol = length(list_exp_prop)))
colnames(ret) = list_exp_prop
if (sum(grepl('Properties', get_section(record))) == 0) {
return(c())
} else{
ids  = .section.by.heading(record$Section,
get_section(record)[grepl('Properties', get_section(record))])
ids = .section.by.heading(ids$Section,'Experimental Properties')
prop = list_exp_prop[list_exp_prop %in% get_section(ids)]
ids_val <- lapply(prop, function(x) {
sec <- .section.by.heading(ids$Section, x)
sec = unlist(.section.handler(sec))[1]
return(sec)
})
ids_val = unlist(ids_val)
ids_val = ids_val[unique(names(ids_val))]
ret[names(ids_val)] = ids_val
return(ret)
}
}
get_classification = function(record, list_classification) {
ret = data.frame(matrix(NA,nrow = 1,ncol = length(list_exp_prop)))
colnames(ret) = list_exp_prop
if (sum(grepl('Classification', get_section(record))) == 0) {
return(c())
} else{
ids  = .section.by.heading(record$Section,
get_section(record)[grepl('Classification', get_section(record))])
ids_val <- lapply(list_classification, function(x) {
sec <- .section.by.heading(ids$Section, x)
sec = unlist(.section.handler(sec))
return(sec)
})
ids_val = unlist(ids_val)
ids_val = ids_val[unique(names(ids_val))]
ret[names(ids_val)] = ids_val
return(ret)
}
}
for (nom in data$Molecules) {
cid  = get.synonyms(nom)$CID[1]
if (is.null(cid)) {
nom2 = gsub(' ', '', nom)
cid = get.synonyms(nom2)$CID[1]
if (is.null(cid)) {
not_found = c(not_found, nom)
n = n-1
next
}
}
print(cid)
record  = tryCatch({
record = get_record(cid)
record
},error = function(e){NULL})
if(is.null(record)){
not_found = c(not_found, nom)
n=n-1
next
}
if (!is.null(list_identifiers)) {
identifiers = get_identifier(record, list_identifiers)
} else{
identifiers = NA
}
if (F) {
syn = get_synonyms(record)
} else{
syn = NA
}
mol_form <-
.section.by.heading(record$Section, "Names and Identifiers")
mol_form =  .section.by.heading(mol_form$Section, 'Molecular Formula')
mol_form = unlist(.section.handler(mol_form))
mol_form = unique(mol_form)[1]
if (!is.null(list_formula)) {
formula = get_formula(record, list_formula)
} else{
formula = NA
}
if (!is.null(list_comp_prop)) {
comp_prop = get_comp_prop(record, list_comp_prop)
} else{
comp_prop = NA
}
if (!is.null(list_exp_prop)) {
exp_prop = get_exp_prop(record, list_exp_prop)
} else{
exp_prop = NA
}
# if (!is.null(input$classification)) {
#   classification = get_classification(record, input$classification)
# } else{
#   classification = c()
# }
res = cbind.data.frame(
data.frame(
Molecules = nom,
'Formula' = mol_form,
Structure =  sprintf(
'<img src="https://pubchem.ncbi.nlm.nih.gov/image/imgsrv.fcgi?cid=%s&t=l"></img>',
cid
)
),
identifiers,
'Synonyms' = syn,
formula,
comp_prop,
exp_prop
# classification
)
total_res = rbind(total_res, res)
# incProgress(amount = 1,
# message = paste('Molecules: ', i, '/', n))
i = i + 1
}
data$Molecules
nom=data$Molecules[23]
nom
cid  = get.synonyms(nom)$CID[1]
if (is.null(cid)) {
nom2 = gsub(' ', '', nom)
cid = get.synonyms(nom2)$CID[1]
if (is.null(cid)) {
not_found = c(not_found, nom)
n = n-1
next
}
}
cid
get_record(cid)
cid
url <-
sprintf("https://pubchem.ncbi.nlm.nih.gov/rest/pug_view/data/compound/%s/JSON",
cid)
if (is.null(page)) {
warning(sprintf("No data found for %d", cid))
return(NULL)
}
h = basicTextGatherer()
status = curlPerform(url = url, writefunction = h$update)
status
h$value()
h = multiTextGatherer()
h = basicTextGatherer(.mapUnicode = F)
status = curlPerform(url = url, writefunction = h$update)
val <- h$value()
record = RJSONIO::fromJSON(val)$Record
val
record = RJSONIO::fromJSON(val,encoding = 'UTF-8')$Record
h = basicTextGatherer(.mapUnicode = T)
status = curlPerform(url = url, writefunction = h$update)
val <- h$value()
record = RJSONIO::fromJSON(val,encoding = 'UTF-8')$Record
h = basicTextGatherer(.mapUnicode = F)
status = curlPerform(url = url, writefunction = h$update)
val <- h$value()
grep('\\u',val)
val
str(val)
url
gsub('\\u000A',' ',val)
url <-
sprintf("https://pubchem.ncbi.nlm.nih.gov/rest/pug_view/data/compound/%s/JSON",
cid)
if (is.null(page)) {
warning(sprintf("No data found for %d", cid))
return(NULL)
}
h = basicTextGatherer(.mapUnicode = F)
status = curlPerform(url = url, writefunction = h$update)
val <- h$value()
gsub('\\u000A',' ',val)
record = RJSONIO::fromJSON(val)$Record
rjson::fromJSON(val)
jsonlite::fromJSON(val)
record = RJSONIO::fromJSON(val)$Record
record = RJSONIO::fromJSON(val, encoding = 'ISO-8859')$Record
record = RJSONIO::fromJSON(val, encoding = 'ISO-8859-2')$Record
record = RJSONIO::fromJSON(val, encoding = 'ISO-8859-7')$Record
h = basicTextGatherer(.mapUnicode = T)
status = curlPerform(url = url, writefunction = h$update)
val <- h$value()
record = RJSONIO::fromJSON(val, encoding = 'ISO-8859-7')$Record
record = RJSONIO::fromJSON(val, encoding = 'UTF-8')$Record
h = basicTextGatherer(.mapUnicode = F)
status = curlPerform(url = url, writefunction = h$update)
val <- h$value()
record = RJSONIO::fromJSON(val, encoding = 'UTF-8')$Record
rm(list = ls())
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
library(shiny)
source('ui.R', local = TRUE)
source('server.R')
shinyApp(
ui = ui,
server = server
)
rm(list = ls())
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
library(shiny)
source('ui.R', local = TRUE)
source('server.R')
shinyApp(
ui = ui,
server = server
)
Q
rm(list = ls())
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
library(shiny)
source('ui.R', local = TRUE)
source('server.R')
shinyApp(
ui = ui,
server = server
)
total_res = c()
not_found = c()
n = length(data$Molecules)
i = 1
for (nom in data$Molecules) {
cid  = get.synonyms(nom)$CID[1]
if (is.null(cid)) {
nom2 = gsub(' ', '', nom)
cid = get.synonyms(nom2)$CID[1]
if (is.null(cid)) {
not_found = c(not_found, nom)
n = n-1
next
}
}
print(cid)
record  = tryCatch({
record = get_record(cid)
record
},error = function(e){NULL})
if(is.null(record)){
not_found = c(not_found, nom)
n=n-1
next
}
if (!is.null(list_identifiers)) {
identifiers = get_identifier(record, list_identifiers)
} else{
identifiers = NA
}
if (F) {
syn = get_synonyms(record)
} else{
syn = NA
}
mol_form <-
.section.by.heading(record$Section, "Names and Identifiers")
mol_form =  .section.by.heading(mol_form$Section, 'Molecular Formula')
mol_form = unlist(.section.handler(mol_form))
mol_form = unique(mol_form)[1]
if (!is.null(list_formula)) {
formula = get_formula(record, list_formula)
} else{
formula = NA
}
if (!is.null(list_comp_prop)) {
comp_prop = get_comp_prop(record, list_comp_prop)
} else{
comp_prop = NA
}
if (!is.null(list_exp_prop)) {
exp_prop = get_exp_prop(record, list_exp_prop)
} else{
exp_prop = NA
}
# if (!is.null(input$classification)) {
#   classification = get_classification(record, input$classification)
# } else{
#   classification = c()
# }
res = cbind.data.frame(
data.frame(
Molecules = nom,
'Formula' = mol_form,
Structure =  sprintf(
'<img src="https://pubchem.ncbi.nlm.nih.gov/image/imgsrv.fcgi?cid=%s&t=l"></img>',
cid
)
),
identifiers,
'Synonyms' = syn,
formula,
comp_prop,
exp_prop
# classification
)
total_res = rbind(total_res, res)
# incProgress(amount = 1,
# message = paste('Molecules: ', i, '/', n))
i = i + 1
}
rm(list = ls())
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
library(shiny)
source('ui.R', local = TRUE)
source('server.R')
shinyApp(
ui = ui,
server = server
)
path = choose.dir()
setwd(path)
write.csv2(
x = as.data.frame(tableau),
file = here::here(
paste0('list_molecules_properties_pubchem_', Sys.Date(), '.csv')
),
row.names = F
)
setwd(oldpath)
setwd(dirname(getActiveDocumentContext()$path))
rm(list = ls())
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
library(shiny)
source('ui.R', local = TRUE)
source('server.R')
shinyApp(
ui = ui,
server = server
)
rm(list = ls())
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
library(shiny)
source('ui.R', local = TRUE)
source('server.R')
shinyApp(
ui = ui,
server = server
)
rm(list = ls())
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
library(shiny)
source('ui.R', local = TRUE)
source('server.R')
shinyApp(
ui = ui,
server = server
)
rsconnect::deployApp('D:/These_nico/script/R/Chem Quest/')
